package com.zgg.util{	import com.zgg.util.CustomLoader;		import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.utils.ByteArray;		public class AssetLoader extends Sprite	{		private var mc:Object						= new Object();		private var loadArray:Object 				= new Object(); //list of mandatory loads		private var passiveLoadArray:Object			= new Object(); // list of lazy loads		private var totalBytes:Array				= new Array(); // array of total bytes for each asset				private var totalAssets:Number				= 0; // total in the mandatory list		private var totalComplete:Number			= 0; // total number of assets completely loaded				private var totalAudit:Number				= 0; // total that have reported in		public var totalOverAllBytes:Number			= 0; // total number of overall bytes		public var totalOverallBytesLoaded:Number	= 0; // total number of overall bytes loaded						public var loader			:Loader;			public var url				:*;		public var oIndex			:Object;		public var mandatory		:Boolean;		public var self				:Boolean;		public var _fComplete		:Function;		public var _fError			:Function;		public var _fProgress		:Function;		public var progressOutput	:String;				private var loaderState:String			= 'IDLE';				//item number and callback are cast as objects to allow any data type		public function AssetLoader()		{					}				private function reset():void        {			totalAssets 				= 0;			totalAudit 					= 0;			totalOverAllBytes			= 0;			totalOverallBytesLoaded		= 0;			totalComplete				= 0;        }				public function addAssets(url:*, oIndex:Object, mandatory:Boolean, self:Boolean, fComplete:Function = null, fProgress:Function = null, fError:Function = null)		{			if(self == true)			{				mc[oIndex] = {url:url,fComplete:fComplete,fProgress:fProgress,fError:fError};			}			//add assets to load arrays. if mandatory is false, then that asset will load after the mandatory			else if(mandatory)			{				loadArray[oIndex] = {url:url,fComplete:fComplete,fProgress:fProgress,fError:fError};				_fComplete = fComplete;				_fError	   = fError;			    _fProgress = fProgress			}			else {				passiveLoadArray[oIndex] = {url:url,fComplete:fComplete,fProgress:fProgress,fError:fError};			}		}				public function loadAssets()		{			loaderState = 'LOADING';						if(self == true && mandatory == false)			{				loader = new CustomLoader();				var mUrlRequest = new URLRequest(mc.url);				loader.load(mUrlRequest);				addChild(loader);				setListeners(mc.fComplete,mc.fProgress,mc.fError);			}			else 			{				for (oIndex in loadArray)				{					loader = new CustomLoader();					var url = loadArray[oIndex].url;					var urlRequest = new URLRequest(url);							if(url is String)					{							loader.load(urlRequest);					}					else if(urlRequest is ByteArray)					{						loader.loadBytes(url);					}											addChild(loader);					var a = loadArray[oIndex];					setListeners(a.fComplete,a.fProgress,a.fError);							totalAssets++;				}			}		}		public function setListeners(_fComplete,_fProgress,_fError)		{			loader.contentLoaderInfo.addEventListener(Event.INIT,onLoadStart);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onLoadProgress);						if(_fProgress != null) loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,_fProgress);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,onLoadComplete);						if(_fComplete != null) loader.contentLoaderInfo.addEventListener(Event.COMPLETE,_fComplete);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onLoadError);						if(_fError != null) loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,_fError);		}				public function onLoadStart(e:Event):void		{			//trace("Loading started...");		}				//updates progress status and converts to load percentage		public function onLoadProgress(e:ProgressEvent)		{				if(loaderState != 'POST') //don't calculate percentage for passive loads			{				//if there is no totalBytes value, then just one has started loading				//so add one to the count of assets manually				if(totalBytes[e] == undefined)				{					totalOverAllBytes += e.bytesTotal;					totalAudit++;				}								// adding either the initial total or the difference of the last total sent				totalOverallBytesLoaded += (totalBytes[e] == undefined) ? e.bytesLoaded: e.bytesLoaded - Number(totalBytes[e]);								// adding the total bytes loaded				totalBytes[e] += e.bytesLoaded;				// creating the percentage				progressOutput = String(Math.floor((totalOverallBytesLoaded/totalOverAllBytes) * 100) * 2);				// checking to make sure all the assets have been totalled				// before calling back on the overall progress				if(totalAudit == totalAssets)				{					//trace("mandatory loads are counted");				}			}		}				public function getPercent():String		{			return progressOutput;		}				public function onLoadComplete(e:Event)		{			//turn off listeners for mandatory loads			kill();			//start loading passive loads if they exist			if(passiveLoadArray != null && loaderState != 'POST')				loadPassive();		}				public function loadPassive()		{			if(passiveLoadArray != null && loaderState != 'POST')			{				loaderState 	= 'POST';				totalAssets 	= 0;				totalAudit 		= 0;								for(oIndex in passiveLoadArray)				{					loader = new CustomLoader();					var url = passiveLoadArray[oIndex].url;					var urlRequest = new URLRequest(url);						if(url is String)					{						loader.load(urlRequest);					}					else if(urlRequest is ByteArray)					{						loader.loadBytes(url);					}					var pA = passiveLoadArray[oIndex];					setListeners(pA.fComplete,pA.fProgress,pA.fError);					addChild(loader);						totalComplete++;					totalAssets++;									}			}			else if(totalComplete == totalAssets && loaderState == 'POST')			{				kill();				reset();				passiveLoadArray == null;			}		}				public function onLoadError(e:IOErrorEvent):void		{			//trace('ERROR LOADING ASSET');			kill();		}				public function kill():void		{			loader.contentLoaderInfo.removeEventListener(Event.INIT,onLoadStart);			loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS,onLoadProgress);						if(_fProgress != null) loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS,_fProgress);						loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS,onLoadComplete);						if(_fComplete != null) loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS,_fComplete);						loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onLoadError);						if(_fError != null) loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,_fError);		}	}}